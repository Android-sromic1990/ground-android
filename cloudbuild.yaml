#
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Loads the Docker image from the container registry and then runs the following steps:
#
#  1. Copy Gradle cache
#  2. Extract tarball
#  3. Copy .git dir
#  4. Build debug APK
#  5. Run code quality checks (suppress failure if check fails)
#  6. Save reports to GCS
#  7. Update badge status and fail the build if any errors were encountered during step 4
#  8. Compress Gradle files
#  9. Save tarball
#
#  NOTE: APKs are saved to GCS only if the build passes
#
# Based on https://github.com/GoogleCloudPlatform/cloud-builders-community

steps:

  # Copy the cache from last build
  - name: 'gcr.io/cloud-builders/gsutil'
    id: &copy_gradle_cache 'Copying gradle build cache tar from GCS'
    # we use rsync and not cp so that this step doesn't fail the first time it's run
    args: ['rsync', 'gs://${_CACHE_BUCKET}/', './']

  # Extract the copied tar file
  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: &extract_gradle_cache 'Extracting tar'
    waitFor: [*copy_gradle_cache]
    # This might fail the first time, but that's okay
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        tar zxf cache.tgz || echo "No cache found"

  # Copy .git directory to workspace.
  # This is needed by gitVersioner plugin for auto-generating version code and version name.
  #
  # TODO: Remove this step when .git can be explicitly included in the tarball using .gcloudignore
  # https://github.com/GoogleCloudPlatform/cloud-builders/issues/401
  - name: 'gcr.io/cloud-builders/git'
    id: &copy_git_dir 'Copy .git directory for versioning'
    waitFor: [*extract_gradle_cache]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        git clone --branch master $_HEAD_REPO_URL tmp \
        && mv tmp/.git . \
        && rm -rf tmp

  # Build debug APK
  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: &build_apk 'Build debug apk'
    args: ['./gradlew', 'assembleDebug', '-PdisablePreDex']
    waitFor: [*copy_git_dir]

  # Run code quality checks
  - name: 'gcr.io/$PROJECT_ID/android:28'
    id: &code_check 'Run code checks'
    waitFor: [*build_apk]
    args:
      - '-c'
      - |
        ./gradlew checkCode || echo "fail" > build-status.txt

  # Save all reports to GCS
  - name: 'gcr.io/cloud-builders/gsutil'
    id: &save_reports 'Save reports to GCS'
    waitFor: [*code_check]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
      - cp -r gnd/build/reports gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/reports || echo "Reports not generated"

  # Update status badge and fail build if errors were found in "build" step
  - name: 'gcr.io/cloud-builders/gsutil'
    id: &deferred_build_result 'Update build status'
    waitFor: [*save_reports]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Update build status if running on master branch
        if [[ "${_PUSH_TO_MASTER}" ]]; then
          if [[ $(< build-status.txt) == "fail" ]]; then
            gsutil cp cloud-builder/failure.svg gs://${_CACHE_BUCKET}/status.svg
          else
            gsutil cp cloud-builder/success.svg gs://${_CACHE_BUCKET}/status.svg
          fi

          # Make file public readable
          gsutil acl ch -u AllUsers:R gs://${_CACHE_BUCKET}/status.svg
        fi

        # Delayed build fail
        if [[ $(< build-status.txt) == "fail" ]]; then
          echo "Build failed."
          echo "Reports uploaded to https://console.cloud.google.com/storage/browser/${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID/"
          exit 1
        fi

  # Compress the gradle build cache
  - name: 'gcr.io/$PROJECT_ID/android:base'
    id: &compress_gradle_cache 'Compress gradle build cache'
    waitFor: [*deferred_build_result]
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        tar zcf cache.tgz .gradle

  # Store the build cache
  - name: gcr.io/cloud-builders/gsutil
    id: 'Save gradle cache to GCS'
    args: ['cp', 'cache.tgz', 'gs://${_CACHE_BUCKET}/cache.tgz']
    waitFor: [*compress_gradle_cache]

options:
  logging: GCS_ONLY

# Save the APKs and reports
artifacts:
  objects:
    location: 'gs://${_ARTIFACT_BUCKET}/$BRANCH_NAME-$BUILD_ID'
    paths: ['gnd/build/outputs/apk/*/*.apk']

timeout: 1800s
